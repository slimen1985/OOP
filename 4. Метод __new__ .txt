1. Магический метод __new__ вызывается перед созданием объекта класса.
2. Создадим класс Point и в нем вызовем 2 магичских метода __new__ и __init__.
Для метода __new__ обязательным параметром будет cls, а для __init__ будет self.
cls ссылается на сам класс Point. А self ссылатеся на создаваемый
экземпляр класса.
3. Теперь создадим экземпляр класса pt = Point(1, 2). И если мы запустим
нашу программу, то мы увидим, что экземпляр класса не был создан.
Метод __new__ должен возвращать адрес нового созданного объекта. Но нам нужно его вернуть
и для этого мы должны прописать super().__new__(cls) это базовый класс, и из базового
класса мы передаем ссылку на текущий класс Point.
4. С версии пайтон 3 все классы автоматически наследуются неявно из класса object.
И из этого базового класса мы вызываем метод __new__. Этот метод запускает создание экземпляра класса
Point и возвращает адрес нового созданного объекта.
5. Зачем же нужен метод __new_? Существует известный паттерн Singleton. Разработка класса для работы
с БД. И полагаем, что в программе должен быть только 1 экземпляр класса.
6. __instance это ссылка на экземпляр класса. Для управления создания нового объекта нам нужно
перераспредилить магический метод __new__. Если аттрибут __instance принимает значение None,
то мы создаем в строке новый эуземпляр класса. cls.__instance = super().__new(cls)
Если объект __instance не None, то мы просто вернем адрес выбранного объекта.
7. При попытке создания второго объекта он не был создан, потому что он ссылается на 1 объект.

